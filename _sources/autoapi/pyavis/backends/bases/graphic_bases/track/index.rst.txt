:py:mod:`pyavis.backends.bases.graphic_bases.track`
===================================================

.. py:module:: pyavis.backends.bases.graphic_bases.track


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyavis.backends.bases.graphic_bases.track.Track




.. py:class:: Track(label: str)


   Bases: :py:obj:`abc.ABC`

   Base class representing a plot.

   .. py:method:: add_signal(position: Tuple[float, float] = (0.0, 0.0), scale: float = 1.0, *args, **kwargs) -> pyavis.backends.bases.graphic_bases.signal.Signal

      Add a new signal to the track.

      :param position: Position of the signal
      :type position: (float, float)
      :param scale: Scale of the y values, by default 1.0
      :type scale: float
      :param \*args & **kwargs: See `Signal.set_data()` for more information.


   .. py:method:: add_spectrum(data: pya.Asig | pya.Aspec, position: Tuple[float, float] = (0.0, 0.0), scale: float = 1.0, disp_func: Callable[[numpy.ndarray], numpy.ndarray] = np.abs) -> pyavis.backends.bases.graphic_bases.spectrum.Spectrum

      Add a new spectrum to the track.

      :param data: Data to display as spectrum
      :type data: Asig | Aspec
      :param position: Position of the spectrogram
      :type position: (float, float)
      :param scale: Scale of the y values, by default 1.0
      :type scale: float
      :param disp_func: Function to apply to the stft data
      :type disp_func: (np.ndarray) -> np.ndarray


   .. py:method:: add_line(position: Tuple[float, float] = (0.0, 0.0), angle: float = 0.0) -> pyavis.backends.bases.graphic_bases.infinite_line.InfiniteLine

      Add a new infinite line to the track.

      :param position: Position of the line
      :type position: (float, float)
      :param angle: Angle of the line
      :type angle: float


   .. py:method:: add_rect(position: Tuple[float, float] = (0.0, 0.0), width: float = 1.0, height: float = 1.0) -> pyavis.backends.bases.graphic_bases.rectangle.Rectangle

      Add a new rectangle to the track.

      Parameters:
      position: (float, float)
          Position of the rectangle. (lower-left corner)
      width: float
          Width of the rectangle
      height: float
          Heigth of the rectangle


   .. py:method:: add_spectrogram(data: pya.Asig | pya.Astft, position: Tuple[float, float] = (0.0, 0.0), disp_func: Callable[[numpy.ndarray], numpy.ndarray] = np.abs, with_bar: bool = True, **kwargs) -> pyavis.backends.bases.graphic_bases.spectrogram.Spectrogram

      Add a new spectrogram to the track.

      :param data: Data to display as spectrogram
      :type data: Asig | Astft
      :param position: Position of the spectrogram
      :type position: (float, float)
      :param disp_func: Function to apply to the stft data
      :type disp_func: (np.ndarray) -> np.ndarray
      :param with_bar: Optional color bar added to the plot
      :type with_bar: bool
      :param \*\*kwargs: Passed to Asig.to_stft()


   .. py:method:: add_selection(pos: Tuple[float, float], width: float, height: float) -> pyavis.backends.bases.graphic_bases.rect_selection.RectSelection

      Add an adjustable selection to the track.

      :param positon: Position of the selection (bottom-left corner)
      :type positon: (float, float)
      :param width: Width of the selection
      :type width: float
      :param height: Height of the selection
      :type height: float


   .. py:method:: remove(element: pyavis.backends.bases.graphic_bases.graphic_element.GraphicElement)

      Remove an element from the track.

      :param element: Element to remove
      :type element: GraphicElement


   .. py:method:: link_track(track: Track, axis: Literal[x, y])

      Link either x or y axis of this track with another track.

      :param track: Track to link axis with. If None, the track will instead remove it's present link
      :type track: Track | None
      :param axis: Axis to link
      :type axis: 'x' or 'y'


   .. py:method:: _link_track(track: Track, axis: Literal[x, y])
      :abstractmethod:


   .. py:method:: get_axis(side: Literal[top, bottom, left, right]) -> pyavis.backends.bases.graphic_bases.axis.Axis | None

      Return the axis, or None if no axis is set for that side.

      :param side: Side to get the axis from
      :type side: 'top' | 'bottom' | 'left' | 'right'


   .. py:method:: toggle_axis(side: Literal[top, bottom, left, right], show=True)

      Hide or show the axis of the side.

      :param side: Side to toggle the axis of
      :type side: 'top' | 'bottom' | 'left' | 'right'


   .. py:method:: set_axis(side: Literal[top, bottom, left, right], spacing: Tuple[float, float] = None, disp_func: Callable[[float], str] = None) -> pyavis.backends.bases.graphic_bases.axis.Axis

      Set a new axis for the choosen side.

      :param side: Side of the new axis
      :type side: 'top' | 'bottom' | 'left' | 'right'
      :param spacing: Default spacing if None, else (major, minor) spacing
      :type spacing: (float, float) | None:
      :param disp_func: Default displace function if None, else function values.
      :type disp_func: (float) -> str | None,


   .. py:method:: set_x_view_limits(x_start: float, x_end: float)

      Set the visible range of the x axis.

      :param x_start: Start of the x view range
      :type x_start: float
      :param x_end: End of the x view range
      :type x_end: float


   .. py:method:: set_y_view_limits(y_start, y_end)

      Set the visible range of the y axis.

      :param y_start: Start of the y view range
      :type y_start: float
      :param y_end: End of the y view range
      :type y_end: float


   .. py:method:: set_style(background_color: Any | Literal[default])

      Set the background color of the layout.

      :param background_color: Either "default" or values of the format 'color.color'
      :type background_color: color.color | str, default: "default"


   .. py:method:: _abstract_set_style(background_color)



