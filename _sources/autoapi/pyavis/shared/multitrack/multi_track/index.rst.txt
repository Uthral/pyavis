:py:mod:`pyavis.shared.multitrack.multi_track`
==============================================

.. py:module:: pyavis.shared.multitrack.multi_track


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyavis.shared.multitrack.multi_track.MultiTrack




.. py:class:: MultiTrack


   Class representing a collection of tracks.

   .. py:method:: get_track(track: pyavis.shared.multitrack.track.Track | str | int) -> pyavis.shared.multitrack.track.Track | None

      Get a track.

      :param track: The track, its name or its index
      :type track: Track | str | int

      :returns: The track or None, if the track is not present
      :rtype: Track | None

      :raises TypeError: Raises if 'track' is not one of the listed types


   .. py:method:: add_track(track: pyavis.shared.multitrack.track.Track)

      Add a track.

      :param track: Track to add
      :type track: Track


   .. py:method:: remove_track(track: pyavis.shared.multitrack.track.Track | str | int) -> pyavis.shared.multitrack.track.Track

      Remove a track

      :param track: Either the track, it's name or its index
      :type track: Track | str | int

      :returns: The removed track
      :rtype: Track

      :raises TypeError: Raises if 'track' is not one of the listed types


   .. py:method:: __getitem__(index)

      Accessing array elements through slicing.
          * int, get signal row asig[4];
          * slice, range and step slicing asig[4:40:2]
              # from 4 to 40 every 2 samples;
          * list, subset rows, asig[[2, 4, 6]]
              # pick out index 2, 4, 6 as a new asig
          * tuple, row and column specific slicing, asig[4:40, 3:5]
              # from 4 to 40, channel 3 and 4
          * Time slicing (unit in seconds) using dict asig[{1:2.5}, :]
              creates indexing of 1s to 2.5s.
          * Channel name slicing: asig['l'] returns channel 'l' as
              a new mono asig. asig[['front', 'rear']], etc...
          * bool, subset channels: asig[:, [True, False]]
      :param index: Slicing argument.
      :type index: Number or slice or list or tuple or dict

      :returns: **a** -- __getitem__ returns a subset of the self based on the slicing.
      :rtype: Asig



